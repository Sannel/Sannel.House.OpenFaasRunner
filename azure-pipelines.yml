trigger:
- master
- develop

variables:
  sdk_version: 2.2.300
  dockerRepositoryRoot: sannel
  dockerRepositoryName: house.openfaasrunner
  dockerTagBase: $(Build.SourceBranchName)-$(Build.BuildId)
  imageName: $(dockerRepositoryRoot)/$(dockerRepositoryName):$(dockerTagBase)
  projectFolder: Sannel.House.OpenFaasRunner
  mainProjectPath: src/$(projectFolder)/$(projectFolder).csproj
  mainConfigPath: src/$(projectFolder)/app_config
  tag: 2.2
  codeName: bionic
  hasClient: false
  hasTests: true
  disableLinux: false
  disableWindows: false
  disableOSX: false

name: $(date:yyyy.MM.dd)$(rev:.rr)

jobs:
- job: linux_arm
  pool:
    vmImage: ubuntu-16.04
  condition: ne(variables['disableLinux'], 'true')
  steps:
    - powershell: |
        # Write your commands here
        sudo apt-get update
        sudo apt-get install -y qemu qemu-user-static qemu-user binfmt-support
        Copy-Item -Verbose /usr/bin/qemu-arm-static .
        # Use the environment variables input below to pass secret variables to this script
      displayName: 'Install qemu'
    - task: Docker@1
      displayName: 'Run an image '
      inputs:
        containerregistrytype: 'Container Registry'
        dockerRegistryEndpoint: 'Docker Hub'
        command: 'Run an image'
        arguments: '--rm --privileged'
        imageName: ' multiarch/qemu-user-static:register'
        containerCommand: '--reset'
    - task: Docker@0
      displayName: 'Build an src arm'
      inputs:
        containerregistrytype: 'Container Registry'
        dockerRegistryConnection: 'Docker Hub'
        dockerFile: 'build/linux-arm/Dockerfile.src'
        buildArguments: 'tag=$(tag)-$(codeName)-arm32v7'
        defaultContext: false
        imageName: '$(imageName)-linux-src-arm32v7'
    - task: Docker@0
      displayName: 'Build an image arm'
      inputs:
        containerregistrytype: 'Container Registry'
        dockerRegistryConnection: 'Docker Hub'
        dockerFile: 'build/linux-arm/Dockerfile'
        buildArguments: 'tag=$(tag)-$(codeName)-arm32v7'
        defaultContext: false
        imageName: '$(imageName)-linux-arm32v7'
    - powershell: |
        $img = "$(imageName)".ToLower()
        docker save -o $(Build.StagingDirectory)/$(dockerRepositoryRoot).$(dockerRepositoryName).linux.arm32v7.tar "${img}-linux-arm32v7"
        docker save -o $(Build.StagingDirectory)/$(dockerRepositoryRoot).$(dockerRepositoryName).linux.arm32v7.src.tar "${img}-linux-src-arm32v7"
        tar cvf $(Build.StagingDirectory)/$(dockerRepositoryRoot).$(dockerRepositoryName).linux.arm.tar $(Build.StagingDirectory)/*.tar
        bzip2 -9 $(Build.StagingDirectory)/$(dockerRepositoryRoot).$(dockerRepositoryName).linux.arm.tar
        rm $(Build.StagingDirectory)/*.tar
      displayName: 'export image'
    - task: PublishPipelineArtifact@0
      displayName: 'Publish Pipeline Artifact'
      inputs:
        artifactName: 'linux-arm'
        targetPath: '$(Build.StagingDirectory)'
- job: linux_arm64
  pool:
    vmImage: ubuntu-16.04
  condition: eq(variables['disableLinux'], 'true2')
  steps:
    - powershell: |
        # Write your commands here
        sudo apt-get update
        sudo apt-get install -y qemu qemu-user-static qemu-user binfmt-support
        Copy-Item -Verbose /usr/bin/qemu-aarch64-static .
        # Use the environment variables input below to pass secret variables to this script
      displayName: 'Install qemu'
    - task: Docker@1
      displayName: 'Run an image '
      inputs:
        containerregistrytype: 'Container Registry'
        dockerRegistryEndpoint: 'Docker Hub'
        command: 'Run an image'
        arguments: '--rm --privileged'
        imageName: ' multiarch/qemu-user-static:register'
        containerCommand: '--reset'
    - task: Docker@0
      displayName: 'Build an src arm'
      inputs:
        containerregistrytype: 'Container Registry'
        dockerRegistryConnection: 'Docker Hub'
        dockerFile: 'build/linux-arm/Dockerfile.src'
        buildArguments: 'tag=$(tag)-$(codeName)-arm64v8'
        defaultContext: false
        imageName: '$(imageName)-linux-src-arm64v8'
    - task: Docker@0
      displayName: 'Build an image arm'
      inputs:
        containerregistrytype: 'Container Registry'
        dockerRegistryConnection: 'Docker Hub'
        dockerFile: 'build/linux-arm64/Dockerfile'
        buildArguments: 'tag=$(tag)-$(codeName)-arm64v8'
        defaultContext: false
        imageName: '$(imageName)-linux-arm64v8'
    - powershell: |
        $img = "$(imageName)".ToLower()
        docker save -o $(Build.StagingDirectory)/$(dockerRepositoryRoot).$(dockerRepositoryName).linux.arm64v8.tar "${img}-linux-arm64v8"
        docker save -o $(Build.StagingDirectory)/$(dockerRepositoryRoot).$(dockerRepositoryName).linux.arm64v8.src.tar "${img}-linux-src-arm64v8"
        tar cvf $(Build.StagingDirectory)/$(dockerRepositoryRoot).$(dockerRepositoryName).linux.arm64.tar $(Build.StagingDirectory)/*.tar
        bzip2 -9 $(Build.StagingDirectory)/$(dockerRepositoryRoot).$(dockerRepositoryName).linux.arm64.tar
        rm $(Build.StagingDirectory)/*.tar
      displayName: 'export image'
    - task: PublishPipelineArtifact@0
      displayName: 'Publish Pipeline Artifact'
      inputs:
        artifactName: 'linux-arm64'
        targetPath: '$(Build.StagingDirectory)'
- job: linux_x64
  pool:
    vmImage: ubuntu-16.04
  condition: ne(variables['disableLinux'], 'true')
  steps:
    - task: Docker@0
      displayName: 'Build an src'
      inputs:
        containerregistrytype: 'Container Registry'
        dockerRegistryConnection: 'Docker Hub'
        dockerFile: 'build/linux-x64/Dockerfile.src'
        buildArguments: 'tag=$(tag)-$(codeName)'
        defaultContext: false
        imageName: '$(imageName)-linux-src-x64'
    - task: Docker@0
      displayName: 'Build an image'
      inputs:
        containerregistrytype: 'Container Registry'
        dockerRegistryConnection: 'Docker Hub'
        dockerFile: 'build/linux-x64/Dockerfile'
        buildArguments: 'tag=$(tag)-$(codeName)'
        defaultContext: false
        imageName: '$(imageName)-linux-x64'
    - powershell: |
        $img = "$(imageName)".ToLower()
        docker save -o $(Build.StagingDirectory)/$(dockerRepositoryRoot).$(dockerRepositoryName).linux.x64.run.tar "${img}-linux-x64"
        docker save -o $(Build.StagingDirectory)/$(dockerRepositoryRoot).$(dockerRepositoryName).linux.x64.src.tar "${img}-linux-src-x64"
        tar cvf $(Build.StagingDirectory)/$(dockerRepositoryRoot).$(dockerRepositoryName).linux.x64.tar $(Build.StagingDirectory)/*.tar
        bzip2 -9 $(Build.StagingDirectory)/$(dockerRepositoryRoot).$(dockerRepositoryName).linux.x64.tar
        rm $(Build.StagingDirectory)/*.tar
      displayName: 'export image'
    - task: PublishPipelineArtifact@0
      displayName: 'Publish Pipeline Artifact'
      inputs:
        artifactName: 'linux-x64'
        targetPath: '$(Build.StagingDirectory)'

- job: windows_x64
  pool:
    vmImage: "1903"
  condition: ne(variables['disableWindows'], 'true')
  steps:
    - task: Docker@0
      displayName: 'Build an image x64 1809'
      inputs:
        containerregistrytype: 'Container Registry'
        dockerRegistryConnection: 'Docker Hub'
        action: 'Run a Docker command'
        customCommand: 'build --build-arg tag=2.2-nanoserver-1809 -t $(imageName)-win-src-x64-1809 -f build/windows/Dockerfile.src --isolation hyperv .'
    - task: Docker@0
      displayName: 'Build an image x64 1803'
      inputs:
        containerregistrytype: 'Container Registry'
        dockerRegistryConnection: 'Docker Hub'
        action: 'Run a Docker command'
        customCommand: 'build --build-arg tag=2.2-nanoserver-1803 -t $(imageName)-win-src-x64-1803 -f build/windows/Dockerfile.src --isolation hyperv .'
    - powershell: |
        Invoke-WebRequest -Uri "https://github.com/openfaas-incubator/of-watchdog/releases/download/0.5.3/of-watchdog.exe" -OutFile fwatchdog.exe
      displayName: 'download watchdog'
    - task: Docker@0
      displayName: 'Build an image x64 1809'
      inputs:
        containerregistrytype: 'Container Registry'
        dockerRegistryConnection: 'Docker Hub'
        action: 'Run a Docker command'
        customCommand: 'build --build-arg tag=2.2-nanoserver-1809 -t $(imageName)-win-x64-1809 -f build/windows/Dockerfile --isolation hyperv .'
    - task: Docker@0
      displayName: 'Build an image x64 1803'
      inputs:
        containerregistrytype: 'Container Registry'
        dockerRegistryConnection: 'Docker Hub'
        action: 'Run a Docker command'
        customCommand: 'build --build-arg tag=2.2-nanoserver-1803 -t $(imageName)-win-x64-1803 -f build/windows/Dockerfile --isolation hyperv .'
    - powershell: |
        $img = "$(imageName)".ToLower()
        docker save -o $(Build.StagingDirectory)/$(dockerRepositoryRoot).$(dockerRepositoryName).win.x64.1809.run.tar "${img}-win-x64-1809"
        docker save -o $(Build.StagingDirectory)/$(dockerRepositoryRoot).$(dockerRepositoryName).win.x64.1809.src.tar "${img}-win-src-x64-1809"
        docker save -o $(Build.StagingDirectory)/$(dockerRepositoryRoot).$(dockerRepositoryName).win.x64.1803.run.tar "${img}-win-x64-1803"
        docker save -o $(Build.StagingDirectory)/$(dockerRepositoryRoot).$(dockerRepositoryName).win.x64.1803.src.tar "${img}-win-src-x64-1803"
        tar cvf $(Build.StagingDirectory)/$(dockerRepositoryRoot).$(dockerRepositoryName).win.x64.tar $(Build.StagingDirectory)/*.tar
        bzip2 -9 $(Build.StagingDirectory)/$(dockerRepositoryRoot).$(dockerRepositoryName).win.x64.tar
        rm $(Build.StagingDirectory)/*.tar
      displayName: 'export image'
    - task: PublishPipelineArtifact@0
      displayName: 'Publish Pipeline Artifact'
      inputs:
        artifactName: 'windows-x64'
        targetPath: '$(Build.StagingDirectory)'
